<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <title>Tree Populations vs. Air Quality, Neighborhood by Neighborhood</title>
  <meta content="width=device-width, initial-scale=1" name="viewport" />
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
  <!-- Load d3.js -->
  <script src="https://d3js.org/d3.v6.js"></script>

  <!-- Create an element where the map will take place -->
</head>

<body>

  <%- include ('global/header');  %>
  <%- include ('global/navbar');  %>
  <svg id="my_dataviz" width="400" height="300" align="center"></svg>

  <h1> Tree Population and Air Quality, by Community Districts </h1>
  <script type = "text/javascript" src="map.js"></script>
  <script>
//  let communityDistricts = geojson.feature(nyc, nyc.objects.BoroCD); //issue -- counties = topojson.feature(us, us.objects.counties)
//  let cityMap = new Map(geojson.feature(nyc, nyc.objects.BoroCD).features.map(d => [d.id, d]));


  // The svg
  const svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

  // Map and projection
  const path = d3.geoPath();
  const projection = d3.geoMercator()
    .scale(70)
    .center([0,20])
    .translate([width / 2, height / 2]);

  // Data and color scale
  let data = new Map()
  const colorScale = d3.scaleThreshold()
    .domain([100000, 1000000, 10000000, 30000000, 100000000, 500000000])
    .range(d3.schemeBlues[7]);

  // Load external data and boot
  Promise.all([
  d3.json("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world.geojson"),
  d3.csv("https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/world_population.csv", function(d) {
      data.set(d.code, +d.pop)
  })
  ]).then(function(loadData){
      let topo = loadData[0]

      // Draw the map
    svg.append("g")
      .selectAll("path")
      .data(topo.features)
      .join("path")
        // draw each country
        .attr("d", d3.geoPath()
          .projection(projection)
        )
        // set the color of each country
        .attr("fill", function (d) {
          d.total = data.get(d.id) || 0;
          return colorScale(d.total);
        })
      })



  </script>

  <%- include ('global/footer');  %>

</body>

</html>
